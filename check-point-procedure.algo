

PROCEDURE dot_product(v1,v2:ARRAY_OF FLOAT, VAR ps:FLOAT)
VAR
    i:INTEGER;
BEGIN
   
    FOR i FROM 0 TO v1.length-1 STEP 1  DO
        ps= ps+ v1[i]*v2[i];
    END_FOR
    Write (ps);

END

ALGORITHM orthogonaux
VAR
    i,n:INTEGER;
    v1,v2: ARRAY_OF FLOAT[];
    ps:FLOAT;
BEGIN
WHILE (n<0) DO
    Write( 'donner le nbre de vecteur à calculer');
    Read (n);
END_WHILE
 FOR i FROM 0 TO n-1  STEP 1  DO
        Write ( "donner l'element " ,i+1, " de la  vecteur v1 ");
        Read (v1[i]);
        Write ( "donner l'element " ,i+1, " de la  vecteur v2 ");
        Read (v2[i]);
    END_FOR
    dot_product(v1,v2,ps);
    IF (ps=0) THEN
        write('les deux vecteurs v1[i] et v2[i] sont orthogonaux');
    ELSE
        write('les deux vecteurs v1[i] et v2[i] ne sont pas orthogonaux');
    END_IF
END



//****************** function*****************

FUNCTION dot_product(v1,v2:ARRAY_OF FLOAT):FLOAT
VAR
    i:INTEGER;
    ps: FLOAT;
BEGIN
   
    FOR i FROM 0 TO v1.length-1 STEP 1  DO
        ps= ps+ v1[i]*v2[i];
    END_FOR
    RETURN (ps);

END

ALGORITHM orthogonaux
VAR
    i,n:INTEGER;
    v1,v2: ARRAY_OF FLOAT[];
    ps:FLOAT;
BEGIN
WHILE (n<0) DO
    Write( 'donner le nbre de vecteur à calculer');
    Read (n);
END_WHILE
FOR i FROM 0 TO n-1  STEP 1  DO
        Write ( "donner l'element " ,i+1, " de la  vecteur v1 ");
        Read (v1[i]);
        Write ( "donner l'element " ,i+1, " de la  vecteur v2 ");
        Read (v2[i]);
END_FOR
    ps:= dot_product(v1,v2);
    IF (ps=0) THEN
        write('les deux vecteurs v1[i] et v2[i] sont orthogonaux');
    ELSE
        write('les deux vecteurs v1[i] et v2[i] ne sont pas orthogonaux');
    END_IF
END